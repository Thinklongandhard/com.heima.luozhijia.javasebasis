public interface List<E> {
    Iterator<E> iterator();
    boolean add(E e);
}

public abstract class AbstractList<E> {
    protected int modCount = 0;
}

public class ArrayList<E> extends AbstractList<E> implements List<E> {

    public E get(int index) {
        Objects.checkIndex(index, size);
        return elementData(index);
    }

    public boolean add(E e) {
        modCount++;   //调用add方法后实际修改集合次数加一
        add(e, elementData, size);
        return true;
    }
//遍历
         【Iterator<String> it = list.iterator();】
         调用iterator()方法时，源码会返回一个 Itr()对象
    public Iterator<E> iterator() {
        return new Itr();
    }

    private class Itr implements Iterator<E> {
        int expectedModCount = modCount;
        //这里进行了实际修改次数赋值给了预期修改次数
        /*
            modCount:实际修改集合的次数
            expectedModCount:预期修改集合的次数
        */

        public E next() {
            checkForComodification();  //异常位置
            int i = cursor;
            if (i >= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

}